/**
 * Service de synchronisation des contacts avec Brevo
 * G√®re la cr√©ation, mise √† jour et suppression des contacts dans Brevo
 */

import { supabase } from './supabase-client'
import { supabaseAdmin } from './supabase-admin'

// Types pour les contacts Brevo
export interface BrevoContact {
  email: string
  attributes?: {
    FIRSTNAME?: string
    LASTNAME?: string
    SMS?: string
    // Attributs personnalis√©s LetterCraft
    USER_ID?: string
    SUBSCRIPTION_TIER?: 'free' | 'premium'
    LANGUAGE?: string
    COUNTRY?: string
    REGISTRATION_DATE?: string
    LAST_LOGIN?: string
    LETTERS_GENERATED?: number
    PROFILE_COMPLETE?: boolean
  }
  listIds?: number[]
  updateEnabled?: boolean
}

export interface BrevoContactResponse {
  id: number
  email: string
  emailBlacklisted: boolean
  smsBlacklisted: boolean
  createdAt: string
  modifiedAt: string
  attributes: Record<string, any>
}

export interface BrevoListResponse {
  id: number
  name: string
  totalBlacklisted: number
  totalSubscribers: number
  folderId: number
  createdAt: string
  campaignStats: any[]
}

// Configuration des listes Brevo
export const BREVO_LISTS = {
  ALL_USERS: parseInt(process.env.BREVO_LIST_ALL_USERS || '1'),
  FREE_USERS: parseInt(process.env.BREVO_LIST_FREE_USERS || '2'),
  PREMIUM_USERS: parseInt(process.env.BREVO_LIST_PREMIUM_USERS || '3'),
  ACTIVE_USERS: parseInt(process.env.BREVO_LIST_ACTIVE_USERS || '4'),
  CHURNED_USERS: parseInt(process.env.BREVO_LIST_CHURNED_USERS || '5')
} as const

class BrevoContactsService {
  private readonly apiKey: string
  private readonly baseUrl = 'https://api.brevo.com/v3'

  constructor() {
    this.apiKey = process.env.BREVO_API_KEY!
    if (!this.apiKey) {
      throw new Error('BREVO_API_KEY is required')
    }
  }

  /**
   * Headers pour les requ√™tes Brevo API
   */
  private getHeaders(): Record<string, string> {
    return {
      'Content-Type': 'application/json',
      'api-key': this.apiKey
    }
  }

  /**
   * Cr√©er ou mettre √† jour un contact dans Brevo
   */
  async createOrUpdateContact(contactData: BrevoContact): Promise<BrevoContactResponse | null> {
    try {
      console.log(`üìß Synchronisation contact Brevo: ${contactData.email}`)

      const response = await fetch(`${this.baseUrl}/contacts`, {
        method: 'POST',
        headers: this.getHeaders(),
        body: JSON.stringify({
          email: contactData.email,
          attributes: contactData.attributes || {},
          listIds: contactData.listIds || [BREVO_LISTS.ALL_USERS],
          updateEnabled: contactData.updateEnabled !== false // true par d√©faut
        })
      })

      if (!response.ok) {
        const errorData = await response.text()
        
        // Si le contact existe d√©j√†, on met √† jour
        if (response.status === 400 && errorData.includes('Contact already exist')) {
          console.log(`üîÑ Contact existe d√©j√†, mise √† jour: ${contactData.email}`)
          return await this.updateContact(contactData.email, contactData)
        }
        
        console.error(`‚ùå Erreur cr√©ation contact Brevo:`, response.status, errorData)
        return null
      }

      const result = await response.json()
      console.log(`‚úÖ Contact cr√©√© dans Brevo:`, result.id)
      return result
    } catch (error) {
      console.error('‚ùå Erreur inattendue lors de la cr√©ation du contact:', error)
      return null
    }
  }

  /**
   * Mettre √† jour un contact existant dans Brevo
   */
  async updateContact(email: string, contactData: Partial<BrevoContact>): Promise<BrevoContactResponse | null> {
    try {
      console.log(`üîÑ Mise √† jour contact Brevo: ${email}`)

      const updatePayload: any = {}
      
      if (contactData.attributes) {
        updatePayload.attributes = contactData.attributes
      }
      
      if (contactData.listIds) {
        updatePayload.listIds = contactData.listIds
      }

      const response = await fetch(`${this.baseUrl}/contacts/${encodeURIComponent(email)}`, {
        method: 'PUT',
        headers: this.getHeaders(),
        body: JSON.stringify(updatePayload)
      })

      if (!response.ok) {
        const errorData = await response.text()
        console.error(`‚ùå Erreur mise √† jour contact Brevo:`, response.status, errorData)
        return null
      }

      console.log(`‚úÖ Contact mis √† jour dans Brevo: ${email}`)
      
      // R√©cup√©rer les infos du contact mis √† jour
      return await this.getContact(email)
    } catch (error) {
      console.error('‚ùå Erreur inattendue lors de la mise √† jour du contact:', error)
      return null
    }
  }

  /**
   * R√©cup√©rer un contact depuis Brevo
   */
  async getContact(email: string): Promise<BrevoContactResponse | null> {
    try {
      const response = await fetch(`${this.baseUrl}/contacts/${encodeURIComponent(email)}`, {
        method: 'GET',
        headers: this.getHeaders()
      })

      if (!response.ok) {
        if (response.status === 404) {
          console.log(`üì≠ Contact non trouv√© dans Brevo: ${email}`)
        } else {
          const errorData = await response.text()
          console.error(`‚ùå Erreur r√©cup√©ration contact Brevo:`, response.status, errorData)
        }
        return null
      }

      return await response.json()
    } catch (error) {
      console.error('‚ùå Erreur inattendue lors de la r√©cup√©ration du contact:', error)
      return null
    }
  }

  /**
   * Supprimer un contact de Brevo
   */
  async deleteContact(email: string): Promise<boolean> {
    try {
      console.log(`üóëÔ∏è Suppression contact Brevo: ${email}`)

      const response = await fetch(`${this.baseUrl}/contacts/${encodeURIComponent(email)}`, {
        method: 'DELETE',
        headers: this.getHeaders()
      })

      if (!response.ok) {
        const errorData = await response.text()
        console.error(`‚ùå Erreur suppression contact Brevo:`, response.status, errorData)
        return false
      }

      console.log(`‚úÖ Contact supprim√© de Brevo: ${email}`)
      return true
    } catch (error) {
      console.error('‚ùå Erreur inattendue lors de la suppression du contact:', error)
      return false
    }
  }

  /**
   * Ajouter un contact √† une liste sp√©cifique
   */
  async addContactToList(email: string, listId: number): Promise<boolean> {
    try {
      console.log(`üìã Ajout contact √† la liste ${listId}: ${email}`)

      const response = await fetch(`${this.baseUrl}/contacts/lists/${listId}/contacts/add`, {
        method: 'POST',
        headers: this.getHeaders(),
        body: JSON.stringify({
          emails: [email]
        })
      })

      if (!response.ok) {
        const errorData = await response.text()
        console.error(`‚ùå Erreur ajout √† la liste:`, response.status, errorData)
        return false
      }

      console.log(`‚úÖ Contact ajout√© √† la liste ${listId}: ${email}`)
      return true
    } catch (error) {
      console.error('‚ùå Erreur inattendue lors de l\'ajout √† la liste:', error)
      return false
    }
  }

  /**
   * Retirer un contact d'une liste sp√©cifique
   */
  async removeContactFromList(email: string, listId: number): Promise<boolean> {
    try {
      console.log(`üìã Suppression contact de la liste ${listId}: ${email}`)

      const response = await fetch(`${this.baseUrl}/contacts/lists/${listId}/contacts/remove`, {
        method: 'POST',
        headers: this.getHeaders(),
        body: JSON.stringify({
          emails: [email]
        })
      })

      if (!response.ok) {
        const errorData = await response.text()
        console.error(`‚ùå Erreur suppression de la liste:`, response.status, errorData)
        return false
      }

      console.log(`‚úÖ Contact retir√© de la liste ${listId}: ${email}`)
      return true
    } catch (error) {
      console.error('‚ùå Erreur inattendue lors de la suppression de la liste:', error)
      return false
    }
  }

  /**
   * D√©terminer les listes appropri√©es pour un utilisateur
   */
  private determineUserLists(user: any): number[] {
    const listIds = [BREVO_LISTS.ALL_USERS]
    
    // Liste selon le tier d'abonnement
    if (user.subscription_tier === 'premium') {
      listIds.push(BREVO_LISTS.PREMIUM_USERS)
    } else {
      listIds.push(BREVO_LISTS.FREE_USERS)
    }

    // Liste utilisateurs actifs (ont g√©n√©r√© au moins une lettre)
    if ((user.letters_generated || 0) > 0) {
      listIds.push(BREVO_LISTS.ACTIVE_USERS)
    }

    // Liste utilisateurs d√©sactiv√©s (inactifs depuis longtemps)
    if (user.last_sign_in_at) {
      const lastLogin = new Date(user.last_sign_in_at)
      const thirtyDaysAgo = new Date()
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
      
      if (lastLogin < thirtyDaysAgo && (user.letters_generated || 0) === 0) {
        listIds.push(BREVO_LISTS.CHURNED_USERS)
      }
    }

    return listIds
  }

  /**
   * Construire les attributs personnalis√©s pour un utilisateur
   */
  private buildUserAttributes(user: any): BrevoContact['attributes'] {
    const attributes: BrevoContact['attributes'] = {
      FIRSTNAME: user.first_name || '',
      LASTNAME: user.last_name || '',
      USER_ID: user.id,
      SUBSCRIPTION_TIER: user.subscription_tier || 'free',
      LANGUAGE: user.language || 'fr',
      COUNTRY: user.country || '',
      REGISTRATION_DATE: user.created_at,
      LAST_LOGIN: user.last_sign_in_at || user.created_at,
      LETTERS_GENERATED: user.letters_generated || 0,
      PROFILE_COMPLETE: !!(user.first_name && user.last_name && user.country)
    }

    // Ajouter le t√©l√©phone si disponible
    if (user.phone) {
      attributes.SMS = user.phone
    }

    return attributes
  }

  /**
   * Synchroniser un utilisateur LetterCraft avec Brevo
   */
  async syncUserToBrevo(userId: string): Promise<boolean> {
    try {
      console.log(`üîÑ Synchronisation utilisateur ${userId} vers Brevo`)

      // R√©cup√©rer les donn√©es utilisateur depuis Supabase
      const { data: profile, error: profileError } = await supabaseAdmin
        .from('user_profiles')
        .select(`
          user_id,
          first_name,
          last_name,
          phone,
          language,
          country,
          subscription_tier,
          created_at
        `)
        .eq('user_id', userId)
        .single()

      if (profileError || !profile) {
        console.error('‚ùå Profil utilisateur non trouv√©:', profileError)
        return false
      }

      // R√©cup√©rer les donn√©es auth et le nombre de lettres g√©n√©r√©es
      const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.getUserById(userId)
      if (authError || !authUser?.user?.email) {
        console.error('‚ùå Donn√©es auth non trouv√©es:', authError)
        return false
      }

      const { data: lettersData } = await supabaseAdmin
        .from('generated_letters')
        .select('id')
        .eq('user_id', userId)

      const user = {
        id: userId,
        email: authUser.user.email,
        first_name: profile.first_name,
        last_name: profile.last_name,
        phone: profile.phone,
        language: profile.language,
        country: profile.country,
        subscription_tier: profile.subscription_tier,
        created_at: authUser.user.created_at || profile.created_at,
        last_sign_in_at: authUser.user.last_sign_in_at,
        letters_generated: lettersData?.length || 0
      }

      // Construire les attributs et listes pour l'utilisateur
      const attributes = this.buildUserAttributes(user)
      const listIds = this.determineUserLists(user)

      // Synchroniser avec Brevo
      const result = await this.createOrUpdateContact({
        email: user.email,
        attributes,
        listIds,
        updateEnabled: true
      })

      if (result) {
        console.log(`‚úÖ Utilisateur ${userId} synchronis√© avec Brevo`)
        return true
      } else {
        console.error(`‚ùå √âchec synchronisation utilisateur ${userId}`)
        return false
      }
    } catch (error) {
      console.error('‚ùå Erreur inattendue lors de la synchronisation:', error)
      return false
    }
  }

  /**
   * Synchronisation en lot des utilisateurs
   */
  async bulkSyncUsers(userIds: string[]): Promise<{ success: number; failed: number }> {
    console.log(`üîÑ Synchronisation en lot de ${userIds.length} utilisateurs`)
    
    let success = 0
    let failed = 0

    for (const userId of userIds) {
      try {
        const result = await this.syncUserToBrevo(userId)
        if (result) {
          success++
        } else {
          failed++
        }
        
        // Petite pause pour √©viter de surcharger l'API
        await new Promise(resolve => setTimeout(resolve, 100))
      } catch (error) {
        console.error(`‚ùå Erreur sync utilisateur ${userId}:`, error)
        failed++
      }
    }

    console.log(`üìä Synchronisation termin√©e: ${success} succ√®s, ${failed} √©checs`)
    return { success, failed }
  }

  /**
   * Mettre √† jour les listes d'un contact (ajouter/retirer selon le statut)
   */
  async updateContactLists(email: string, newListIds: number[]): Promise<boolean> {
    try {
      console.log(`üìã Mise √† jour des listes pour le contact: ${email}`)
      
      // R√©cup√©rer le contact actuel pour voir ses listes actuelles
      const currentContact = await this.getContact(email)
      if (!currentContact) {
        console.log(`üì≠ Contact non trouv√© pour mise √† jour des listes: ${email}`)
        return false
      }

      // Mettre √† jour le contact avec les nouvelles listes
      const result = await this.updateContact(email, {
        listIds: newListIds
      })

      if (result) {
        console.log(`‚úÖ Listes mises √† jour pour ${email}: [${newListIds.join(', ')}]`)
        return true
      } else {
        console.error(`‚ùå √âchec mise √† jour des listes pour ${email}`)
        return false
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour des listes:', error)
      return false
    }
  }

  /**
   * Synchroniser tous les contacts avec les bonnes listes (maintenance)
   */
  async syncAllContactLists(): Promise<{ updated: number; failed: number }> {
    try {
      console.log('üîÑ Synchronisation de toutes les listes de contacts')
      
      // R√©cup√©rer tous les utilisateurs depuis user_profiles
      const { data: profiles, error } = await supabaseAdmin
        .from('user_profiles')
        .select(`
          user_id,
          first_name,
          last_name,
          subscription_tier,
          created_at
        `)

      if (error || !profiles) {
        console.error('‚ùå Erreur r√©cup√©ration des profils:', error)
        return { updated: 0, failed: 0 }
      }

      let updated = 0
      let failed = 0

      for (const profile of profiles) {
        try {
          // R√©cup√©rer l'email depuis auth.users
          const { data: authUser } = await supabaseAdmin.auth.admin.getUserById(profile.user_id)
          if (!authUser?.user?.email) {
            console.warn(`‚ö†Ô∏è Email non trouv√© pour l'utilisateur ${profile.user_id}`)
            failed++
            continue
          }

          // R√©cup√©rer le nombre de lettres g√©n√©r√©es
          const { data: lettersData } = await supabaseAdmin
            .from('generated_letters')
            .select('id')
            .eq('user_id', profile.user_id)

          const user = {
            id: profile.user_id,
            email: authUser.user.email,
            first_name: profile.first_name,
            last_name: profile.last_name,
            subscription_tier: profile.subscription_tier,
            created_at: profile.created_at,
            last_sign_in_at: authUser.user.last_sign_in_at,
            letters_generated: lettersData?.length || 0
          }

          const listIds = this.determineUserLists(user)
          const success = await this.updateContactLists(user.email, listIds)
          
          if (success) {
            updated++
          } else {
            failed++
          }
          
          // Petite pause pour √©viter de surcharger l'API
          await new Promise(resolve => setTimeout(resolve, 200))
        } catch (error) {
          console.error(`‚ùå Erreur sync listes pour ${user.email}:`, error)
          failed++
        }
      }

      console.log(`üìä Synchronisation des listes termin√©e: ${updated} mis √† jour, ${failed} √©checs`)
      return { updated, failed }
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation des listes:', error)
      return { updated: 0, failed: 0 }
    }
  }

  /**
   * Cr√©er tous les utilisateurs LetterCraft qui n'existent pas encore dans Brevo
   */
  async createMissingContacts(): Promise<{ created: number; already_exists: number; failed: number }> {
    try {
      console.log('üîÑ Cr√©ation des contacts manquants dans Brevo')
      
      // R√©cup√©rer tous les utilisateurs depuis user_profiles
      const { data: profiles, error } = await supabaseAdmin
        .from('user_profiles')
        .select(`
          user_id,
          first_name,
          last_name,
          phone,
          language,
          country,
          subscription_tier,
          created_at
        `)

      if (error || !profiles) {
        console.error('‚ùå Erreur r√©cup√©ration des profils:', error)
        return { created: 0, already_exists: 0, failed: 0 }
      }

      let created = 0
      let already_exists = 0
      let failed = 0

      console.log(`üìä V√©rification de ${profiles.length} utilisateurs dans Brevo`)

      for (const profile of profiles) {
        try {
          // R√©cup√©rer l'email depuis auth.users
          const { data: authUser } = await supabaseAdmin.auth.admin.getUserById(profile.user_id)
          if (!authUser?.user?.email) {
            console.warn(`‚ö†Ô∏è Email non trouv√© pour l'utilisateur ${profile.user_id}`)
            failed++
            continue
          }

          const email = authUser.user.email

          // V√©rifier si le contact existe d√©j√† dans Brevo
          const existingContact = await this.getContact(email)
          if (existingContact) {
            console.log(`‚úÖ Contact d√©j√† existant: ${email}`)
            already_exists++
            continue
          }

          // R√©cup√©rer le nombre de lettres g√©n√©r√©es
          const { data: lettersData } = await supabaseAdmin
            .from('generated_letters')
            .select('id')
            .eq('user_id', profile.user_id)

          const user = {
            id: profile.user_id,
            email: email,
            first_name: profile.first_name,
            last_name: profile.last_name,
            phone: profile.phone,
            language: profile.language,
            country: profile.country,
            subscription_tier: profile.subscription_tier,
            created_at: authUser.user.created_at || profile.created_at,
            last_sign_in_at: authUser.user.last_sign_in_at,
            letters_generated: lettersData?.length || 0
          }

          // Construire les attributs et listes pour l'utilisateur
          const attributes = this.buildUserAttributes(user)
          const listIds = this.determineUserLists(user)

          // Cr√©er le contact dans Brevo
          console.log(`‚ûï Cr√©ation du contact: ${email}`)
          const result = await this.createOrUpdateContact({
            email: user.email,
            attributes,
            listIds,
            updateEnabled: false // Cr√©er seulement, ne pas mettre √† jour si existe
          })

          if (result) {
            created++
            console.log(`‚úÖ Contact cr√©√©: ${email} (ID: ${result.id})`)
          } else {
            failed++
            console.error(`‚ùå √âchec cr√©ation contact: ${email}`)
          }
          
          // Petite pause pour √©viter de surcharger l'API Brevo
          await new Promise(resolve => setTimeout(resolve, 150))
        } catch (error) {
          console.error(`‚ùå Erreur cr√©ation contact pour ${profile.user_id}:`, error)
          failed++
        }
      }

      console.log(`üìä Cr√©ation des contacts termin√©e:`)
      console.log(`   ‚ûï ${created} nouveaux contacts cr√©√©s`)
      console.log(`   ‚úÖ ${already_exists} contacts d√©j√† existants`)
      console.log(`   ‚ùå ${failed} √©checs`)
      
      return { created, already_exists, failed }
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation des contacts manquants:', error)
      return { created: 0, already_exists: 0, failed: 0 }
    }
  }

  /**
   * Nettoyer les contacts supprim√©s de LetterCraft
   */
  async cleanupDeletedUsers(): Promise<number> {
    try {
      console.log('üßπ Nettoyage des contacts supprim√©s de LetterCraft')
      
      // Cette fonctionnalit√© n√©cessiterait de r√©cup√©rer tous les contacts de Brevo
      // et de v√©rifier s'ils existent encore dans LetterCraft
      // Pour l'instant, on retourne 0 (√† impl√©menter si n√©cessaire)
      
      return 0
    } catch (error) {
      console.error('‚ùå Erreur lors du nettoyage:', error)
      return 0
    }
  }
}

// Instance singleton du service
export const brevoContacts = new BrevoContactsService()

// Helper pour synchroniser rapidement un utilisateur
export async function syncUserToBrevo(userId: string): Promise<boolean> {
  return await brevoContacts.syncUserToBrevo(userId)
}

// Helper pour la synchronisation en lot
export async function bulkSyncUsersToBrevo(userIds: string[]): Promise<{ success: number; failed: number }> {
  return await brevoContacts.bulkSyncUsers(userIds)
}

// Helper pour la mise √† jour des listes de contacts
export async function updateContactLists(email: string, listIds: number[]): Promise<boolean> {
  return await brevoContacts.updateContactLists(email, listIds)
}

// Helper pour la synchronisation de toutes les listes
export async function syncAllContactLists(): Promise<{ updated: number; failed: number }> {
  return await brevoContacts.syncAllContactLists()
}

// Helper pour cr√©er tous les contacts manquants
export async function createMissingContacts(): Promise<{ created: number; already_exists: number; failed: number }> {
  return await brevoContacts.createMissingContacts()
}